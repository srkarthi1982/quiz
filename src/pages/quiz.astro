---
import LayoutFull from "../app/Layout.astro";
// import { actions } from "astro:actions";

// const numQuestions = 1;
// const platform = "Programming";
// const subject = "Web Development";
// const topic = "Alpine JS";
// const roadmap = "Conditional & Looping Directives";
// const level = "E";
// let questions = [];
// const { data, error } = await Astro.callAction(actions.generateQuestion, {
// 	numQuestions,
// 	platform,
// 	subject,
// 	topic,
// 	roadmap,
// 	level
// });
// if(error) console.log('error', error)
// const reader = data?.body?.getReader();
// const decoder = new TextDecoder();
// let result = "";
// if(reader){
// 	while (true) {
// 	const { done, value } = await reader.read();
// 	if (done) break;
// 	result += decoder.decode(value, { stream: true });
// 	try {
// 		questions = JSON.parse(result);
// 	} catch (e) {}
// }
// }
---

<LayoutFull active="quiz">
	<div x-data="{ step: 1, steps: ['Choose a Platform', 'Select your Subject', 'Select a Topic', 'Start with Roadmap', 'Quiz'] }" class="card flex flex-col items-center p-4">
		<!-- Stepper -->
		<ol class="flex items-center w-full max-w-md">
			<template x-for="(label, index) in steps">
				<li class="flex items-center w-full"
					:class="step > index + 1 ? 'text-blue-600 after:border-blue-100' : 'text-gray-400 after:border-gray-200'">
					<div class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0"
						:class="step > index ? 'bg-blue-100' : 'bg-gray-200'">
						<span x-text="index + 1"></span>
					</div>
					<div x-show="index !== steps.length - 1" class="w-full h-1 border-b border-4"
						:class="step > index + 1 ? 'border-blue-100' : 'border-gray-200'">
					</div>
				</li>
			</template>
		</ol>
	
		<!-- Step Label -->
		<h1 class="text-2xl font-bold text-center my-5" x-text="steps[step - 1]"></h1>
	
		<!-- Navigation Buttons -->
		<div class="flex gap-4">
			<button @click="step > 1 ? step-- : null"
				class="px-4 py-2 bg-gray-300 text-gray-800 rounded disabled:opacity-50"
				:disabled="step === 1">
				Previous
			</button>
			<button @click="step < steps.length ? step++ : null"
				class="px-4 py-2 bg-blue-500 text-white rounded disabled:opacity-50"
				:disabled="step === steps.length">
				Next
			</button>
		</div>
	</div>
	
	
	
	


		<!-- <div class="space-y-6">
			{
				questions.qz.map((item: any, index: number) => (
					<div class="p-5 border rounded-lg shadow-sm bg-gray-50">
						<h2 class="text-lg font-semibold text-gray-900">
							{index + 1}. {item.q}
						</h2>

						<ul class="mt-3 space-y-2">
							{item.o.map((option: any, idx: number) => (
								<li class="flex gap-2 items-start">
									<span class="font-semibold">
										{String.fromCharCode(97 + idx)}.
									</span>
									<span>{option}</span>
								</li>
							))}
						</ul>

						<p class="mt-4 text-green-600 font-semibold">
							âœ… Correct Answer: {item.o[item.a]}
						</p>

						<p class="mt-2 text-gray-700 italic">
							ðŸ’¡ Explanation: {item.e}
						</p>
					</div>
				))
			}
		</div> -->
	
</LayoutFull>
